import pyfiglet as pi
import os
import platform
import main
class networkscan:
    def networkscaning(self):
        main.Hasky.clear(self)
        print(os.system("figlet 'Network Scan' -f digital -c"))
        print ("\n\t [1] manualy scanning")
        print ("\t [2] Autometic scanning\n\n")
        option = input ("\t [*] Select : ")
        if (option == '1'):
            main.Hasky.clear(self)
            print(os.system("figlet 'Network Scan' -f digital -c"))
            print("\n")

            print(main.color.YELLOW + "     Basic Commands\n")
            print(main.color.END + main.color.GREEN + "     Scan a single target —> nmap [target]")
            print("     Scan multiple targets —> nmap [target1,target2,etc]")
            print("     Scan a list of targets —-> nmap -iL [list.txt]")
            print("     Scan a range of hosts —-> nmap [range of IP addresses]")
            print("     Scan an entire subnet —-> nmap [IP address/cdir]")
            print("     Scan random hosts —-> nmap -iR [number]")
            print("     Excluding targets from a scan —> nmap [targets] –exclude [targets]")
            print("     Excluding targets using a list —> nmap [targets] –excludefile [list.txt]")
            print("     Perform an aggressive scan —> nmap -A [target]")
            print("     Scan an IPv6 target —> nmap -6 [target]\n")
            print(main.color.YELLOW + "     Discovery Options\n")
            print(main.color.END + main.color.GREEN + "     Perform a ping scan only —> nmap -sP [target]")
            print("     Don’t ping —> nmap -PN [target]")
            print("     TCP SYN Ping —> nmap -PS [target]")
            print("     TCP ACK ping —-> nmap -PA [target]")
            print("     UDP ping —-> nmap -PU [target] ")
            print("     SCTP Init Ping —> nmap -PY [target]")
            print("     ICMP echo ping —-> nmap -PE [target]")
            print("     ICMP Timestamp ping —> nmap -PP [target]")
            print("     ICMP address mask ping —> nmap -PM [target]")
            print("     IP protocol ping —-> nmap -PO [target]")
            print("     ARP ping —> nmap -PR [target]")
            print("     Traceroute —> nmap –traceroute [target]")
            print("     Force reverse DNS resolution —> nmap -R [target]")
            print("     Disable reverse DNS resolution —> nmap -n [target]")
            print("     Alternative DNS lookup —> nmap –system-dns [target]")
            print("     Manually specify DNS servers —> nmap –dns-servers [servers] [target]")
            print("     Create a host list —-> nmap -sL [targets]\n")
            print(main.color.YELLOW + "     Advanced Scanning Options\n")
            print(main.color.END + main.color.GREEN + "     TCP SYN scan —> nmap -sS [target]")
            print("     TCP connect scan —-> nmap -sT [target]")
            print("     UDP scan —-> nmap -sU [target]")
            print("     TCP Null scan —-> nmap -sN [target]")
            print("     TCP Fin scan —> nmap -sF [target]")

            print("     Xmas scan —-> nmap -sX [target]")
            print("     TCP ACK scan —> nmap -sA [target]")
            print("     Custom TCP scan —-> nmap –scanflags [flags] [target]")
            print("     IP protocol scan —-> nmap -sO [target]")
            print("     Send raw Ethernet packets —-> nmap –send-eth [target]")
            print("     Send IP packets —-> nmap –send-ip [target]\n")
            print(main.color.YELLOW + "     Port Scanning Options\n")
            print(main.color.END + main.color.GREEN + "     Perform a fast scan —> nmap -F [target] ")
            print("     Scan specific ports —-> nmap -p [ports] [target]")
            print("     Scan ports by name —-> nmap -p [port name] [target]")
            print("     Scan ports by protocol —-> nmap -sU -sT -p U:[ports],T:[ports] [target]")
            print("     Scan all ports —-> nmap -p “*” [target]")
            print("     Scan top ports —–> nmap –top-ports [number] [target]")
            print("     Perform a sequential port scan —-> nmap -r [target]\n")
            print(main.color.YELLOW + "     Version Detection\n")
            print(main.color.END + main.color.GREEN + "     Operating system detection —-> nmap -O [target] ")
            print("     Attempt to guess an unknown —-> nmap -O –osscan-guess [target]")
            print("     Service version detection —-> nmap -sV [target]")
            print("     Troubleshooting version scans —-> nmap -sV –version-trace [target]")
            print("     Perform a RPC scan —-> nmap -sR [target]\n")
            print(main.color.YELLOW + "     Timing Options\n")
            print(main.color.END + main.color.GREEN + "     Timing Templates —-> nmap -T [0-5] [target]")
            print("     Set the packet TTL —-> nmap –ttl [time] [target]")
            print("     Minimum of parallel connections —-> nmap –min-parallelism [number] [target]")
            print("     Maximum of parallel connection —-> nmap –max-parallelism [number] [target]")
            print("     Minimum host group size —–> nmap –min-hostgroup [number] [targets]")
            print("     Maximum host group size —-> nmap –max-hostgroup [number] [targets]")
            print("     Maximum RTT timeout —–> nmap –initial-rtt-timeout [time] [target]")
            print("     Initial RTT timeout —-> nmap –max-rtt-timeout [TTL] [target]")
            print("     Maximum retries —-> nmap –max-retries [number] [target]")
            print("     Host timeout —-> nmap –host-timeout [time] [target]")
            print("     Minimum scan delay —-> nmap –scan-delay [time] [target]")
            print("     Maximum scan delay —-> nmap –max-scan-delay [time] [target]")
            print("     Minimum packet rate —-> nmap –min-rate [number] [target]")
            print("     Maximum packet rate —-> nmap –max-rate [number] [target]")
            print("     Defeat reset rate limits —-> nmap –defeat-rst-ratelimit [target]\n")
            print(main.color.YELLOW + "     Firewall Evasion Techniques\n")
            print(main.color.END + main.color.GREEN + "     Fragment packets —-> nmap -f [target]")
            print("     Specify a specific MTU —-> nmap –mtu [MTU] [target]")
            print("     Send bad checksums —-> nmap –badsum [target]")
            print("     Spoof MAC address —-> nmap –spoof-mac [MAC|0|vendor] [target]")
            print("     Randomize target scan order —-> nmap –randomize-hosts [target]")
            print("     Append random data —-> nmap –data-length [size] [target]")
            print("     Manually specify a source port —-> nmap –source-port [port] [target]")
            print("     Idle zombie scan —> nmap -sI [zombie] [target]")
            print("     Use a decoy —-> nmap -D RND: [number] [target]\n")
            print(main.color.YELLOW + "     Output Options\n")
            print(main.color.END + main.color.GREEN + "     Grepable output —-> nmap -oG [scan.txt] [target]")
            print("     Save output to a text file —-> nmap -oN [scan.txt] [target]")
            print("     Save output to a xml file —> nmap -oX [scan.xml] [target]")
            print("     Output all supported file types —-> nmap -oA [path/filename] [target]")
            print("     Periodically display statistics —-> nmap –stats-every [time] [target]")
            print("     133t output —-> nmap -oS [scan.txt] [target]\n")
            print(main.color.YELLOW + "     Troubleshooting and Debugging\n")
            print(main.color.END + main.color.GREEN + "     Verbose output —-> nmap -v [target]")
            print("     Debugging —-> nmap -d [target]")
            print("     Display port state reason —-> nmap –reason [target]")
            print("     Only display open ports —-> nmap –open [target]")
            print("     Trace packets —> nmap –packet-trace [target]")
            print("     Display host networking —> nmap –iflist")
            print("     Specify a network interface —> nmap -e [interface] [target]\n")
            print(main.color.YELLOW + "     Nmap Scripting Engine\n")
            print(main.color.END + main.color.GREEN + "     Execute individual scripts —> nmap –script [script.nse] [target]")
            print("     Execute multiple scripts —-> nmap –script [expression] [target]")
            print("     Script categories —-> all, auth, default, discovery, external, intrusive, malware, safe, vuln")
            print("     Execute scripts by category —-> nmap –script [category] [target]")
            print("     Execute multiple scripts categories —-> nmap –script [category1,category2, etc]")
            print("     Troubleshoot scripts —-> nmap –script [script] –script-trace [target]")
            print("     Update the script database —-> nmap –script-updatedb\n")
            print(main.color.YELLOW + "     Ndiff\n")
            print(main.color.END + main.color.GREEN + "     Comparison using Ndiff —-> ndiff [scan1.xml] [scan2.xml]")
            print("     Ndiff verbose mode —-> ndiff -v [scan1.xml] [scan2.xml]")
            print("     XML output mode —-> ndiff –xml [scan1.xm] [scan2.xml]")
            print("\n")
            nmaps = input(main.color.BLUE + "     Enter Nmap Command: ")
            print(main.color.GREEN + '\n <-------------------------------------------------------------------------------------------->')
            print(os.system("sudo " +nmaps))
            print('\n <-------------------------------------------------------------------------------------------->')
        elif(option == '2'):
            main.Hasky.clear(self)
            print(os.system("figlet 'Network Scan' -f digital -c"))
            print("\n")
            print("\t [1] TCP port scan")
            print("\t [2] TCP service scan")
            print("\t [3] UDP port scan \n\n ")
            option  = input("\tSelect : ")
            print("\n")
            if (option == '1'):
                print("\n")
                ip = input(" \t [*] Enter IP Address :")
                print("\n")
                os.system("sudo nmap -Pn -sS --stats-every 3m --max-retries 1 --max-scan-delay 20 --defeat-rst-ratelimit -T4 -p1-65535 -oN tcp_port.txt " + ip)
            elif (option == '2'):
                print("\n")
                ip = input(" \t [*] Enter IP Address :")
                ports = input("\t [*] Enter port Address (ex. 21,22,80,445) :")
                os.system("sudo nmap -nvv -Pn- -sSV -p " + ports + " -version-intensity 9 -A -oN tcp_port_service.txt " + ip )
            elif (option == '3'):
                print("\n")
                ip = input(" \t [*] Enter IP Address :")
                os.system("sudo nmap -Pn --top-ports 1000 -sU --stats-every 3m --max-retries 1 -T3 p1-65535 -oN udp_port.txt " + ip)
            else:
                print("\n")
                print("\t Invalid Input :)")
                networkscan.networkscaning(self)
        ans = input(main.color.CYAN + "             Back To manu(Y/N): ")
        if( ans == 'Y' or ans == 'y'):
            main.Hasky.spot(self)
        if( ans == 'N' or ans == 'n'):
            networkscan.networkscaning(self)
        else:
            print(main.color.RED + "Invalid Input :)")
